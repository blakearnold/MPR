#! /usr/bin/perl
#                              -*- Mode: Cperl -*-
# image.preinst ---
# Author           : Manoj Srivastava ( srivasta@tiamat.datasync.com )
# Created On       : Sun Jun 14 03:38:02 1998
# Created On Node  : tiamat.datasync.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Sun Sep 24 14:04:42 2006
# Last Machine Used: glaurung.internal.golden-gryphon.com
# Update Count     : 99
# Status           : Unknown, Use with caution!
# HISTORY          :
# Description      :
#
#

#
#use strict; #for debugging

use Debconf::Client::ConfModule qw(:all);
version('2.0');
my $capb=capb("backup");

$|=1;

# Predefined values:
my $version         = "=V";
my $link_in_boot    = "=IB";     # Should be empty, mostly
my $no_symlink      = "=S";     # Should be empty, mostly
my $reverse_symlink = "=R";     # Should be empty, mostly
my $do_symlink      = "Yes";	# target machine defined
my $do_boot_enable  = "Yes";	# target machine defined
my $do_bootfloppy   = "Yes";	# target machine defined
my $do_bootloader   = "Yes";	# target machine defined
my $move_image      = '';       # target machine defined
my $mkimage         = "=M";     # command to generate the initrd image
my $do_initrd       = '';       # target machine defined
my $warn_initrd     = 'YES';    # target machine defined
my $kimage          = "=K";     # Should be empty, mostly
my $loader          = "=L";     # lilo, silo, quik, palo, vmelilo, nettrom
                                # or elilo
my $image_dir       = "=D";     # where the image is located
my $clobber_modules = '';       # target machine defined
my $initrd          = "=I";     # initrd kernel
my $use_hard_links  = '';       # hardlinks do not wirk across fs boundaries
my $postinst_hook   = '';       #Normally we do not
my $postrm_hook     = '';       #Normally we do not
my $preinst_hook    = '';       #Normally we do not
my $prerm_hook      = '';       #Normally we do not
my $minimal_swap    = '';       # Do not swap symlinks
my $ignore_depmod_err = '';    # normally we do not
my $relink_src_link   = 'YES';	# There is no harm in checking the link
my $relink_build_link = 'YES'; # There is no harm in checking the link
my $force_build_link  = '';	 # There is no harm in checking the link
my $official_image    = "=OF"; # only true for official images
my $arch              = "=A";  #  should be same as dpkg --print-installation-architecture
my $kernel_arch       = "=B";
my $ramdisk           = "=MK";  # List of tools to create initial ram fs.
my $initrddep         = "=MD";  # List of dependencies for such tools
my $package_name    = "=ST-image-$version";

my $Loader          = "NoLOADER"; #
$Loader             = "LILO"     if $loader =~ /^lilo/io;
$Loader             = "SILO"     if $loader =~ /^silo/io;
$Loader             = "QUIK"     if $loader =~ /^quik/io;
$Loader             = "yaboot"   if $loader =~ /^yaboot/io;
$Loader             = "PALO"     if $loader =~ /^palo/io;
$Loader             = "NETTROM"  if $loader =~ /^nettrom/io;
$Loader             = "VMELILO"  if $loader =~ /^vmelilo/io;
$Loader             = "ZIPL"     if $loader =~ /^zipl/io;
$Loader             = "ELILO"    if $loader =~ /^elilo/io;


#known variables
my @boilerplate     = ();
my @silotemplate    = ();
my @quiktemplate    = ();
my @palotemplate    = ();
my @vmelilotemplate = ();
my $bootdevice      = '';
my $rootdevice      = '';
my $rootdisk        = '';
my $rootpartition   = '';
my $image_dest      = "/";
my $realimageloc    = "/$image_dir/";
my $have_conffile   = "";
my $CONF_LOC        = '/etc/kernel-img.conf';
my $relative_links  = '';
my $silent_modules  = '';
my $silent_loader   = '';
my $warn_reboot     = 'Yes';     # Warn that we are installing a version of
                                 # the kernel we are running

my $modules_base    = '/lib/modules';

die "Pre inst Internal error. Aborting." unless $version;

exit 0 if $ARGV[0] =~ /abort-upgrade/;
exit 1 unless $ARGV[0] =~ /(install|upgrade)/;

# Official images may silently upgrade
if ($official_image =~ /^\s*YES\s*$/o && ($ARGV[0] =~ /upgrade/)) {
    $silent_modules = 'Yes';
  }

# remove multiple leading slashes; make sure there is at least one.
$realimageloc  =~ s|^/*|/|o;
$realimageloc  =~ s|/+|/|o;

if (-r "$CONF_LOC" && -f "$CONF_LOC"  ) {
  if (open(CONF, "$CONF_LOC")) {
    while (<CONF>) {
      chomp;
      s/\#.*$//g;
      next if /^\s*$/;

      $do_symlink      = "" if /do_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $no_symlink      = "" if /no_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $reverse_symlink = "" if /reverse_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $link_in_boot    = "" if /link_in_boot\s*=\s*(no|false|0)\s*$/ig;
      $move_image      = "" if /move_image\s*=\s*(no|false|0)\s*$/ig;
      $clobber_modules = '' if /clobber_modules\s*=\s*(no|false|0)\s*$/ig;
      $do_boot_enable  = '' if /do_boot_enable\s*=\s*(no|false|0)\s*$/ig;
      $do_bootfloppy   = '' if /do_bootfloppy\s*=\s*(no|false|0)\s*$/ig;
      $do_bootloader   = '' if /do_bootloader\s*=\s*(no|false|0)\s*$/ig;
      $do_initrd       = '' if /do_initrd\s*=\s*(no|false|0)\s*$/ig;
      $warn_initrd     = '' if /warn_initrd\s*=\s*(no|false|0)\s*$/ig;
      $relative_links  = '' if /relative_links \s*=\s*(no|false|0)\s*$/ig;
      $use_hard_links  = '' if /use_hard_links\s*=\s*(no|false|0)\s*$/ig;
      $silent_modules  = '' if /silent_modules\s*=\s*(no|false|0)\s*$/ig;
      $silent_loader   = '' if /silent_loader\s*=\s*(no|false|0)\s*$/ig;
      $warn_reboot     = '' if /warn_reboot\s*=\s*(no|false|0)\s*$/ig;
      $minimal_swap    = '' if /minimal_swap\s*=\s*(no|false|0)\s*$/ig;
      $ignore_depmod_err = '' if /ignore_depmod_err\s*=\s*(no|false|0)\s*$/ig;
      $relink_src_link   = '' if /relink_src_link\s*=\s*(no|false|0)\s*$/ig;
      $relink_build_link = '' if /relink_build_link\s*=\s*(no|false|0)\s*$/ig;
      $force_build_link = '' if /force_build_link\s*=\s*(no|false|0)\s*$/ig;

      $do_symlink      = "Yes" if /do_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $no_symlink      = "Yes" if /no_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $reverse_symlink = "Yes" if /reverse_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $link_in_boot    = "Yes" if /link_in_boot\s*=\s*(yes|true|1)\s*$/ig;
      $move_image      = "Yes" if /move_image\s*=\s*(yes|true|1)\s*$/ig;
      $clobber_modules = "Yes" if /clobber_modules\s*=\s*(yes|true|1)\s*$/ig;
      $do_boot_enable  = "Yes" if /do_boot_enable\s*=\s*(yes|true|1)\s*$/ig;
      $do_bootfloppy   = "Yes" if /do_bootfloppy\s*=\s*(yes|true|1)\s*$/ig;
      $do_bootloader   = "Yes" if /do_bootloader\s*=\s*(yes|true|1)\s*$/ig;
      $relative_links  = "Yes" if /relative_links\s*=\s*(yes|true|1)\s*$/ig;
      $do_initrd       = "Yes" if /do_initrd\s*=\s*(yes|true|1)\s*$/ig;
      $warn_initrd     = "Yes" if /warn_initrd\s*=\s*(yes|true|1)\s*$/ig;
      $use_hard_links  = "Yes" if /use_hard_links\s*=\s*(yes|true|1)\s*$/ig;
      $silent_modules  = 'Yes' if /silent_modules\s*=\s*(yes|true|1)\s*$/ig;
      $silent_loader   = 'Yes' if /silent_loader\s*=\s*(yes|true|1)\s*$/ig;
      $warn_reboot     = 'Yes' if /warn_reboot\s*=\s*(yes|true|1)\s*$/ig;
      $minimal_swap    = 'Yes' if /minimal_swap\s*=\s*(yes|true|1)\s*$/ig;
      $ignore_depmod_err = 'Yes' if /ignore_depmod_err\s*=\s*(yes|true|1)\s*$/ig;
      $relink_src_link   = 'Yes' if /relink_src_link\s*=\s*(yes|true|1)\s*$/ig;
      $relink_build_link = 'Yes' if /relink_build_link\s*=\s*(yes|true|1)\s*$/ig;
      $force_build_link = 'Yes' if /force_build_link\s*=\s*(yes|true|1)\s*$/ig;

      $image_dest      = "$1"  if /image_dest\s*=\s*(\S+)/ig;
      $postinst_hook   = "$1"  if /postinst_hook\s*=\s*(\S+)/ig;
      $postrm_hook     = "$1"  if /postrm_hook\s*=\s*(\S+)/ig;
      $preinst_hook    = "$1"  if /preinst_hook\s*=\s*(\S+)/ig;
      $prerm_hook      = "$1"  if /prerm_hook\s*=\s*(\S+)/ig;
      $mkimage         = "$1"  if /mkimage\s*=\s*(.+)$/ig;
      $ramdisk         = "$1"  if /ramdisk\s*=\s*(.+)$/ig;
    }
    close CONF;
    $have_conffile = "Yes";
    $have_conffile = "Yes";	# stop perl complaining
  }
}

if ($do_initrd)    {   $warn_initrd = '';   }
if (!$warn_initrd) {   $do_initrd   = "YES";}

$ENV{KERNEL_ARCH}=$kernel_arch if $kernel_arch;

# About to upgrade this package from version $2 TO THIS VERSION.
# "prerm upgrade" has already been called for the old version of
# this package.

sub find_inird_tool {
  my $hostversion = shift;
  my $version = shift;
  my @ramdisks =
    grep {
      my $args = 
        "$_ " .
          "--supported-host-version=$hostversion " .
            "--supported-target-version=$version " .
              "1>/dev/null 2>&1"
                ;
      system($args) == 0;
    }
      split (/[:,\s]+/, $ramdisk);
}

# For some versions of kernel-package, we had this warning in the
# postinst, but the rules did not really interpolate the value in.
# Here is a sanity check.
my $pattern = "=" . "I";
$initrd=~ s/^$pattern$//;

if ($initrd) {
  chomp (my $hostversion = `uname -r`);
  my @ramdisklist;
  @ramdisklist = find_inird_tool($hostversion, $version, $ramdisk) if $ramdisk;
  if ($#ramdisklist < 0) {
    my $ret;
    my $seen;
    my $text = "${package_name}/preinst/initrd-$version";
    ($ret,$seen) = fset ("$text", 'seen', 'false');
    die "Error setting debconf flags in $text: $seen" if $ret;

    ($ret,$seen) = subst("$text", 'hostversion', "$hostversion");
    die "Error setting debconf substitutions in $text: $seen" if $ret;

    ($ret,$seen) = subst("$text", 'ramdisk', "$ramdisk");
    die "Error setting debconf substitutions in $text: $seen" if $ret;

    ($ret,$seen) = subst("$text", 'initrddep', "$initrddep");
    die "Error setting debconf substitutions in $text: $seen" if $ret;

    ($ret,$seen) = input('medium', "$text");
    if ($ret && $ret != 30 ) {
      die "Error setting debconf question $text: $seen";
    }

    ($ret,$seen) = go ();
    if ($ret && $ret != 30 ) {
      die "Error asking debconf question $text: $seen";
    }
    # I no longer claim this question
    ($ret,$seen) = unregister("$text");
    die "Error unregistering debconf question $text: $seen" if $ret;
    warn "Could not find $ramdisk.";
  }
}


if ($initrd && !$do_initrd) {
  my $ret;
  my $seen;
  my $answer;
  my $invisible = 0;
  my $question = "${package_name}/preinst/bootloader-initrd-$version";
  if ($loader =~ m/^lilo/i) {
    $question = "${package_name}/preinst/lilo-initrd-$version";
  }
  elsif ($loader =~ m/^elilo/i) {
    $question = "${package_name}/preinst/elilo-initrd-$version";
  }
  ($ret,$seen) = fset ("$question", 'seen', 'false');
  die "Error setting debconf flags in $question: $seen" if $ret;

  ($ret,$seen) = input('critical', "$question");
  if ($ret && $ret != 30 ) {
    die "Error setting debconf question $question: $seen";
  }
  $invisible = $ret if $ret == 30;

  ($ret,$seen) = go ();
  if ($ret && $ret != 30 ) {
    die "Error asking debconf question $question: $seen";
  }

  ($ret,$answer) = get("$question");
  die "Error retreiving answer for $question: $answer" if $ret;

  my $note = "${package_name}/preinst/lilo-has-ramdisk";
  if (-f "/etc/lilo.conf"){
    my $ramdisk_found = 0;
    open (CONF, "/etc/lilo.conf")  or warn "Can't open /etc/lilo.conf: $!";
    while (<CONF>) {
      chomp;
      if (m/^(\s*ramdisk\s*=\s*0)/g) {
        my $line = $1;

        ($ret,$seen) = fset ("$note", 'seen', 'false');
        die "Error setting debconf flags in $note: $seen" if $ret;

        $ret = subst("$note", 'LINE', "$line");
        die "Error setting debconf substitutions in $note: $seen" if $ret;

        ($ret,$seen) = input('medium', "$note");
        if ($ret && $ret != 30 ) {
          die "Error setting debconf note $note: $seen";
        }

        ($ret,$seen) = go ();
        if ($ret && $ret != 30 ) {
          die "Error asking debconf question $note: $seen";
        }
        last;
      }
    }
    close CONF;
  }
  $answer =~ s/^\s+//;
  $answer =~ s/\s+$//;
  print STDERR "Ok, Aborting, since the bootloader might not handle " .
    "an initrd/initramfs image.\n" unless $answer =~ /^(f|n)/i;
  if ($answer !~ /^(f|n)/i && $invisible) {
    my $note = "${package_name}/preinst/abort-install-$version";

    ($ret,$seen) = fset ("$note", 'seen', 'false');
    die "Error setting debconf flags in $note: $seen" if $ret;

    ($ret,$seen) = fset ("$note", 'seen', 'false');
    die "Error setting debconf flags in $note: $seen" if $ret;

    ($ret,$seen) = input('critical', "$note");
    if ($ret && $ret != 30 ) {
      die "Error setting debconf note $note: $seen";
    }

    ($ret,$seen) = go ();
    if ($ret && $ret != 30 ) {
      die "Error asking debconf question $note: $seen";
    }
  }
  exit 1 unless  $answer =~ /^(f|n)/i;
}


sub check {
  my $version = shift;
  my $lib_modules="$modules_base/$version";
  my $message = '';

  if (-d "$lib_modules") {
    opendir(DIR, $lib_modules) || die "can’t opendir $lib_modules: $!";
    my @children = readdir(DIR);
    if ($#children > 1) {
      my @dirs  = grep { -d "$lib_modules/$_" } @children;
      if ($#dirs > 1) { # we have subdirs
        my $dir_message='';
        for my $dir (@dirs) {
          if ($dir =~/kernel$/) {
            $dir_message="An older install was detected.\n";
          }
          else {
            $dir_message="Module sub-directories were detected.\n"
              unless $dir_message;
          }
        }
        $message += $dir_message if $dir_message;
      }

      my @links = grep { -l "$lib_modules/$_" } @children;
      if ($#links > -1) {
        my $links_message = '';
        for my $link (@links) {
          next if ($link =~ /^build$/);
          next if ($link =~ /^source$/);
          $links_message = "Symbolic links were detected in $modules_base/$version.\n";
        }
        $message += $links_message if $links_message;
      }
      my @files = grep { -f "$lib_modules/$_" } @children;
      $message += "Additional files also exist in $modules_base/$version.\n"
        if ($#files > -1);
    }
  }
  else { $message .= "$lib_modules does not exist. ";}
  return $message;
}

if (-d "$modules_base/$version") {
  my $errors=check($version);
  warn "Info:\n$errors\n" if $errors;
}

# If this is an official image, and only a build symlink exists, allow
# it to be clobbered.
if ($official_image =~ /^\s*YES\s*$/o ) {
  if (-d "$modules_base/$version" && -l "$modules_base/$version/build" ) {
    rename("$modules_base/$version/build", "$modules_base/$version/build.save") ||
      die "failed to move $modules_base/$version/build:$!";
  }
}

if (-d "$modules_base/$version/kernel") {
  if ($clobber_modules) {
    my $ret = 
      system("mv $modules_base/$version/kernel $modules_base/${version}_kernel_$$");
    my $seen;
    if ($ret) {
      my $note = "${package_name}/preinst/failed-to-move-modules-$version";

      ($ret,$seen) = fset ("$note", 'seen', 'false');
      die "Error setting debconf flags in $note: $seen" if $ret;

      ($ret,$seen) = fset ("$note", 'seen', 'false');
      die "Error setting debconf flags in $note: $seen" if $ret;

      $ret = subst("$note", 'modules_base', "$modules_base");
      die "Error setting debconf substitutions in $note: $seen" if $ret;

      $ret = subst("$note", 'dest', "${version}/kernel_$$");
      die "Error setting debconf substitutions in $note: $seen" if $ret;

      ($ret,$seen) = input('critical', "$note");
      if ($ret && $ret != 30 ) {
        die "Error setting debconf note $note: $seen";
      }

      ($ret,$seen) = go ();
      if ($ret && $ret != 30 ) {
        die "Error asking debconf question $note: $seen";
      }
      exit 1;
    }
  }
  elsif ($silent_modules !~ m/YES/i) {
    my $ret;
    my $seen;
    my $answer;
    my $question = "${package_name}/preinst/overwriting-modules-$version";

    ($ret,$seen) = fset ("$question", 'seen', 'false');
    die "Error setting debconf flags in $question: $seen" if $ret;

    $ret = subst("$question", 'modules_base', "$modules_base");
    die "Error setting debconf substitutions in $question: $seen" if $ret;

    $ret = subst("$question", 'package', "$package_name");
    die "Error setting debconf substitutions in $question: $seen" if $ret;

    ($ret,$seen) = input('critical', "$question");
    if ($ret && $ret != 30 ) {
      die "Error setting debconf question $question: $seen";
    }
    $invisible = $ret if $ret == 30;

    ($ret,$seen) = go ();
    if ($ret && $ret != 30 ) {
      die "Error asking debconf question $question: $seen";
    }

    ($ret,$answer) = get("$question");
    die "Error retreiving answer for $question: $answer" if $ret;

    $answer =~ s/^\s+//;
    $answer =~ s/\s+$//;
    print STDERR "Ok, aborting, since modules for this image already exist.\n"
      unless $answer =~ /^(f|n)/i;
    if ($answer !~ /^(f|n)/i && $invisible) {
      my $note = "${package_name}/preinst/abort-overwrite-$version";

      ($ret,$seen) = fset ("$note", 'seen', 'false');
      die "Error setting debconf flags in $note: $seen" if $ret;

      ($ret,$seen) = fset ("$note", 'seen', 'false');
      die "Error setting debconf flags in $note: $seen" if $ret;

      ($ret,$seen) = input('critical', "$note");
      if ($ret && $ret != 30 ) {
        die "Error setting debconf note $note: $seen";
      }

      ($ret,$seen) = go ();
      if ($ret && $ret != 30 ) {
        die "Error asking debconf question $note: $seen";
      }
    }
    exit 1 unless  $answer =~ /^(f|n)/i;
  }
  else {
    print STDERR <<EOF;
The directory $modules_base/$version still exists. Continuing as directed.
EOF
  ;
  }
}

if ( -f "$modules_base/$version/modules.dep" && $warn_reboot) {
  my $running = '';
  chop($running=`uname -r`);
  if ($running eq $version) {
    my $note = "${package_name}/preinst/already-running-this-$version";

    ($ret,$seen) = fset ("$note", 'seen', 'false');
    die "Error setting debconf flags in $note: $seen" if $ret;

    ($ret,$seen) = fset ("$note", 'seen', 'false');
    die "Error setting debconf flags in $note: $seen" if $ret;

    $ret = subst("$note", 'modules_base', "$modules_base");
    die "Error setting debconf substitutions in $note: $seen" if $ret;

    $ret = subst("$note", 'running', "$running");
    die "Error setting debconf substitutions in $note: $seen" if $ret;

    ($ret,$seen) = input('critical', "$note");
    if ($ret && $ret != 30 ) {
      die "Error setting debconf note $note: $seen";
    }

    ($ret,$seen) = go ();
    if ($ret && $ret != 30 ) {
      die "Error asking debconf question $note: $seen";
    }
  }
}

# set the env var stem
$ENV{'STEM'} = "=ST";

sub exec_script {
  my $type   = shift;
  my $script = shift;
  print STDERR "Running $type hook script $script.\n";
  system ("$script $version $realimageloc$kimage-$version") &&
    print STDERR "User $type hook script [$script] ";
  if ($?) {
    if ($? == -1) {
      print STDERR "failed to execute: $!\n";
    }
    elsif ($? & 127) {
      printf STDERR "died with signal %d, %s coredump\n",
        ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
      printf STDERR "exited with value %d\n", $? >> 8;
    }
    exit $? >> 8;
  }
}
sub run_hook {
  my $type   = shift;
  my $script = shift;
  if ($script =~ m,^/,) {
    # Full path provided for the hook script
    if (-x "$script") {
      &exec_script($type,$script);
    }
    else {
      die "The provided $type hook script [$script] could not be run.\n";
    }
  }
  else {
    # Look for it in a safe path
    for my $path ('/bin', '/sbin', '/usr/bin', '/usr/sbin') {
      if (-x "$path/$script") {
        &exec_script($type, "$path/$script");
        return 0;
      }
    }
    # No luck
    print STDERR "Could not find $type hook script [$script].\n";
    die "Looked in: '/bin', '/sbin', '/usr/bin', '/usr/sbin'\n";
  }
}


## Run user hook script here, if any
if (-x "$preinst_hook") {
  &run_hook("preinst", $preinst_hook);
}
if (-d "/etc/kernel/preinst.d") {
  print STDERR "Examining /etc/kernel/preinst.d/\n";
  system ("run-parts --verbose --exit-on-error --arg=$version" .
          " --arg=$realimageloc$kimage-$version" .
          " /etc/kernel/preinst.d") &&
            die "Failed to process /etc/kernel/preinst.d";
}
if (-d "/etc/kernel/preinst.d/$version") {
  print STDERR "Examining /etc/kernel/preinst.d/$version.\n";
  system ("run-parts --verbose --exit-on-error --arg=$version" .
          " --arg=$realimageloc$kimage-$version" .
          " /etc/kernel/preinst.d/$version") &&
            die "Failed to process /etc/kernel/preinst.d/$version";
}
print STDERR "Done.\n";

exit 0;

__END__


